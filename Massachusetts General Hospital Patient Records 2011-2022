-- Dataset: Massachusetts General Hospital Patient Records 2011-2022
-- Source: https://app.mavenanalytics.io/datasets
-- Queried using: MySQL Workbench

/*
Analyzing Patient Demographics
*/
-- What is the average number of visits per patient per year?
SELECT 
    yr, 
    AVG(num_encounters) AS average_encounters_per_patient
FROM 
    (SELECT 
        YEAR(encounter_start) AS yr,
        patient,
        COUNT(*) AS num_encounters
    FROM encounters
    GROUP BY 
        yr, 
        patient) patient_encounters
GROUP BY yr
ORDER BY yr DESC;
    
-- What are the most common encounter types?
SELECT 
    encounterclass, 
    COUNT(*) AS visits
FROM encounters
GROUP BY encounterclass
ORDER BY 2 DESC;

-- Analyzing encounter frequency by patient age, gender, and race
SELECT 
    COUNT(CASE WHEN gender = 'F' THEN 1 END) / COUNT(*) AS percentage_female,
    COUNT(CASE WHEN gender = 'M' THEN 1 END) / COUNT(*) AS percentage_male
FROM encounters
JOIN patients ON encounters.patient = patients.id;
-- Average age at encounter
SELECT
    AVG(age) AS average_age
FROM (
SELECT
    TIMESTAMPDIFF(
        YEAR,
        STR_TO_DATE(patients.birthdate, '%m/%d/%Y'),
        DATE(encounters.encounter_start)) AS age
FROM encounters
JOIN patients ON encounters.patient=patients.id
) ages;

-- race/procedures correlations
WITH reasons_by_race AS (
SELECT
    patients.race,
    procedures.reasondescription AS reason,
    COUNT(*) AS patient_count,
    DENSE_RANK() OVER (PARTITION BY race ORDER BY COUNT(*) DESC) AS ranking
FROM patients
JOIN procedures ON patients.id=procedures.patient
WHERE procedures.reasondescription NOT IN ('')
GROUP BY
    race,
    procedures.reasondescription
)
SELECT
    race,
    reason,
    patient_count
FROM reasons_by_race
WHERE ranking <= 2;

/*
Cost analysis
*/
-- Comparing average costs across different encounter types
SELECT
    encounterclass,
    ROUND(AVG(base_encounter_cost), 2) AS average_base_cost,
    ROUND(AVG(total_claim_cost), 2) AS average_total_cost
FROM encounters
GROUP BY encounterclass
ORDER BY average_total_cost DESC;

-- Analyzing the relationship between encounter duration and cost
WITH durations AS (
    SELECT
        *,
        CASE
            WHEN hour_duration BETWEEN 0 AND 4 THEN '0-4 hours'
            WHEN hour_duration BETWEEN 4 AND 24 THEN 'up to 1 day'
            WHEN hour_duration BETWEEN 24 AND 72 THEN '1-3 days'
            WHEN hour_duration BETWEEN 72 AND 168 THEN '3-7 days'
            WHEN hour_duration BETWEEN 168 AND 720 THEN '1-4 weeks'
            WHEN hour_duration BETWEEN 720 AND 2160 THEN '1-3 months'
            WHEN hour_duration BETWEEN 2160 AND 8760 THEN '3 months-1 year'
            WHEN hour_duration > 8760 THEN '> 1 year'
            ELSE 'error'
        END AS duration
    FROM (
        SELECT
            encounterclass,
            TIMESTAMPDIFF(hour, encounter_start, encounter_stop) AS hour_duration,
            base_encounter_cost,
            total_claim_cost
        FROM
            encounters
    ) AS hours
)
SELECT
    duration,
    COUNT(*) AS encounters,
    ROUND(AVG(total_claim_cost), 2) AS average_total_cost
FROM durations
GROUP BY duration
ORDER BY average_total_cost DESC;

-- Calculate the average percentage of costs covered by payers
SELECT
    ROUND(
        AVG(percent_covered)
        , 2) AS average_covered
FROM (
SELECT
    (payer_coverage / total_claim_cost) * 100  AS percent_covered
FROM encounters
) percent_payer_covers;
 -- grouped by payers
 SELECT
    payers.name,
    ROUND(
        AVG(payer_coverage / total_claim_cost) * 100
        , 2) AS percent_covered
FROM encounters
JOIN payers ON encounters.payer=payers.id
GROUP BY payers.name
ORDER BY percent_covered DESC;
-- grouped by encounter class
SELECT
    encounterclass,
    ROUND(
        AVG(payer_coverage / total_claim_cost) * 100
        , 2) AS percent_covered
FROM encounters
GROUP BY encounterclass
ORDER BY percent_covered DESC;

/*
Procedure Analysis
*/
-- Identifying top 10 most common procedures
SELECT
    procedure_descr,
    total_procedures
FROM (
    SELECT
        DENSE_RANK() OVER (ORDER BY COUNT(*) DESC) AS ranking,
        description AS procedure_descr,
        COUNT(*) AS total_procedures
    FROM procedures
    GROUP BY procedure_descr
) ranking_procedures
WHERE ranking < 11;

-- Analyze procedure costs by type or organization
SELECT
    encounters.encounterclass,
    ROUND(
        AVG(procedures.base_cost)
        , 2) AS average_procedure_base_cost
FROM procedures
JOIN encounters ON procedures.encounter=encounters.id
GROUP BY encounters.encounterclass
ORDER BY average_procedure_base_cost DESC;

-- Calculate the average duration of procedures
-- Outliers: 384 hours and 32 hours.
SELECT
    SEC_TO_TIME( -- converting back to readable timestamp
        AVG(
            TIMESTAMPDIFF(SECOND, procedure_start, procedure_stop) -- getting duration in seconds
        )
    ) AS average_duration
FROM procedures;
-- removing outliers
SELECT
    SEC_TO_TIME(
        AVG(
            TIMESTAMPDIFF(SECOND, procedure_start, procedure_stop)
        )
    ) AS average_duration
FROM procedures
WHERE description NOT IN ( -- removing outliers of 384 & 32 hours
    'Admission to long stay hospital', 
    'Human epidermal growth factor receptor 2 gene detection by fluorescence in situ hybridization (procedure)');
    
/*
Payer Analysis
*/
-- Analyze which payers cover the highest percentage of costs
SELECT
    payers.name,
    AVG(
        encounters.payer_coverage / encounters.total_claim_cost * 100
        ) AS average_claim_coverage
FROM payers
JOIN encounters ON payers.id=encounters.payer
GROUP BY payers.name
ORDER BY average_claim_coverage DESC;

-- Identifying correlations between payers and specific procedure types
SELECT
    payers.name,
    encounters.encounterclass,
    COUNT(*) as total_encounters,
    ROUND(
        COUNT(*) * 100 / SUM(count(*)) 
            OVER (PARTITION BY payers.name)
        , 2) AS encounter_percent
FROM payers
JOIN encounters ON payers.id=encounters.payer
JOIN procedures ON encounters.id=procedures.encounter
GROUP BY 
    payers.name, 
    encounters.encounterclass
ORDER BY 
    payers.name, 
    encounter_percent DESC;

 -- Top 3 reasons for procedures per payer
 SELECT
    insurance_provider,
    reasondescription,
    total_encounters
FROM (
    SELECT
        payers.name AS insurance_provider,
        procedures.reasondescription,
        COUNT(*) AS total_encounters,
        DENSE_RANK() OVER (PARTITION BY payers.name ORDER BY COUNT(*) DESC) AS ranking
    FROM payers
    JOIN encounters
        ON payers.id=encounters.payer
    JOIN procedures
        ON encounters.id=procedures.encounter
    WHERE procedures.reasondescription != '' -- filtering out blank descriptions
    GROUP BY
        payers.name,
        procedures.reasondescription
    ORDER BY payers.name
) description_ranks
WHERE ranking <= 2;

-- Gender makeup for each payer
SELECT
    payers.name AS provider,
    COUNT(CASE WHEN gender = 'F' THEN gender ELSE NULL END) / COUNT(*) AS pct_female,
    COUNT(CASE WHEN gender = 'M' THEN gender ELSE NULL END) / COUNT(*) AS pct_male,
    COUNT(*) AS total
FROM encounters
JOIN payers ON encounters.payer=payers.id
JOIN patients ON encounters.patient=patients.id
GROUP BY payers.name
ORDER BY provider;
